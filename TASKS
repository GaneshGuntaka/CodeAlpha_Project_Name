TASK 1: LANGUAGE TRANSLATION TOOL
from azure.cognitiveservices.translator import TranslatorTextClient
from msrest.authentication import CognitiveServicesCredentials

def translate_text(text, target_language, subscription_key, endpoint):
    credentials = CognitiveServicesCredentials(subscription_key)
    translator = TranslatorTextClient(endpoint, credentials)
    result = translator.translator.translate(text, target_language=target_language)
    return result.text

# Input text to be translated
input_text = input("Enter the text to translate: ")

# Target language
target_language = input("Enter the target language (e.g., fr for French): ")

# Microsoft Translator API credentials
subscription_key = "YOUR_SUBSCRIPTION_KEY"
endpoint = "YOUR_ENDPOINT"

# Translate the text
translated_text = translate_text(input_text, target_language, subscription_key, endpoint)

# Output the translated text
print("Translated text:", translated_text)

TASK 2: CHATBOT FOR FAQs
Code using NLTK
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

# Preprocess FAQ data
faq_data = [
    ("What is your return policy?", "Our return policy allows returns within 30 days of purchase."),
    ("How can I track my order?", "You can track your order using the tracking number provided in your confirmation email."),
    # Add more FAQs here
]

# Train NLP model
def classify_question(question):
    # Tokenize and clean up question
    tokens = word_tokenize(question.lower())
    tokens = [token for token in tokens if token.isalpha()]
    tokens = [token for token in tokens if token not in stopwords.words("english")]

    # Classify question based on keywords
    for faq_question, faq_answer in faq_data:
        if any(keyword in tokens for keyword in word_tokenize(faq_question.lower())):
            return faq_answer

    # Default response if question not recognized
    return "I'm sorry, I don't understand your question."

# Example usage
user_question = input("Ask me a question: ")
response = classify_question(user_question)
print("Response:", response)
Code using SpaCy
import spacy

# Load SpaCy English language model
nlp = spacy.load("en_core_web_sm")

# Preprocess FAQ data
faq_data = [
    ("What is your return policy?", "Our return policy allows returns within 30 days of purchase."),
    ("How can I track my order?", "You can track your order using the tracking number provided in your confirmation email."),
    # Add more FAQs here
]

# Train NLP model
def classify_question(question):
    # Tokenize and clean up question
    doc = nlp(question.lower())
    tokens = [token.text for token in doc if token.is_alpha]

    # Classify question based on keywords
    for faq_question, faq_answer in faq_data:
        if any(keyword in tokens for keyword in nlp(faq_question.lower())):
            return faq_answer

    # Default response if question not recognized
    return "I'm sorry, I don't understand your question."

# Example usage
user_question = input("Ask me a question: ")
response = classify_question(user_question)
print("Response:", response)

TASK 3: OBJECT DETECTION & TRACKING
import cv2

# Load YOLO model and classes
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
classes = []
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Get output layer names
layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

# Initialize video capture
cap = cv2.VideoCapture(0)  # Use 0 for webcam, or provide the path to a video file

while True:
    # Read frame from the video
    ret, frame = cap.read()
    if not ret:
        break

    # Resize frame for faster processing (optional)
    frame = cv2.resize(frame, None, fx=0.4, fy=0.4)

    # Detect objects in the frame
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)

    # Process detections
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:  # Adjust confidence threshold as needed
                # Get object information
                center_x = int(detection[0] * frame.shape[1])
                center_y = int(detection[1] * frame.shape[0])
                w = int(detection[2] * frame.shape[1])
                h = int(detection[3] * frame.shape[0])

                # Draw bounding box around detected object
                cv2.rectangle(frame, (center_x - w // 2, center_y - h // 2), (center_x + w // 2, center_y + h // 2), (0, 255, 0), 2)
                cv2.putText(frame, classes[class_id], (center_x, center_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Display the frame with detected objects
    cv2.imshow("Object Detection", frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and close windows
cap.release()
cv2.destroyAllWindows()
